<?php

namespace Tests\Feature\Domain\Orders\Actions\Cart\Item;

use Domain\Distributors\Models\Distributor;
use Domain\Orders\Actions\Cart\Item\LoadProductWithEntitiesForCartItem;
use Domain\Orders\Dtos\CartItemDto;
use Domain\Products\Models\OrderingRules\OrderingRule;
use Domain\Products\Models\Product\Pricing\PricingRuleLevel;
use Domain\Products\Models\Product\Product;
use Domain\Products\Models\Product\ProductAttribute;
use Domain\Products\Models\Product\ProductAvailability;
use Domain\Products\Models\Product\ProductDetail;
use Domain\Products\Models\Product\ProductDistributor;
use Domain\Products\Models\Product\ProductPricing;
use Domain\Sites\Models\Site;
use Tests\TestCase;

class LoadProductForCartItemTest extends TestCase
{
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        ProductDetail::factory()->create();
        ProductAttribute::factory()->create();
        $priceLevel = PricingRuleLevel::factory()->create();
        $rule = OrderingRule::factory()->create();
        ProductPricing::factory()->create([
            'pricing_rule_id' => $priceLevel->rule_id,
            'ordering_rule_id' => $rule->id
        ]);
    }

    /** @test */
    public function can_load_nonmatrix_product_without_distributor()
    {
        $site = Site::first();
        $product = Product::first();
        $this->assertions(
            $action = LoadProductWithEntitiesForCartItem::run(
                $product->id,
                $site
            )
        );

        $this->assertNull($action->productDistributor);
        $this->assertFalse($action->product->hasParent());
    }

    /** @todo */
    public function can_load_nonmatrix_product_with_distributor()
    {
        $product = Product::first();
        $product->update([
            'default_distributor_id' => Distributor::firstOrFactory()->id
        ]);
        ProductDistributor::factory()->create();

        $this->assertions(
            $action = LoadProductWithEntitiesForCartItem::run(
                $product->id,
                Site::first()
            )
        );
        $this->assertInstanceOf(
            ProductDistributor::class,
            $action->productDistributor
        );
        $this->assertFalse($action->product->hasParent());
    }

    /** @test */
    public function can_load_matrix_product_without_distributor()
    {
        $parentProduct = Product::first();

        $product = Product::factory()->create([
            'parent_product' => $parentProduct->id
        ]);

        $priceLevel = PricingRuleLevel::factory()->create();
        $rule = OrderingRule::factory()->create();
        ProductPricing::factory()->create([
            'product_id' => $product->id,
            'pricing_rule_id' => $priceLevel->rule_id,
            'ordering_rule_id' => $rule->id
        ]);

        $this->assertions(
            $action = LoadProductWithEntitiesForCartItem::run(
                $product->id,
                Site::first()
            )
        );

        $this->assertNull($action->productDistributor);
        $this->assertTrue($action->product->hasParent());
    }

    /** @todo */
    public function can_load_matrix_product_with_distributor()
    {
        $parentProduct = Product::first();

        $product = Product::factory()->create([
            'parent_product' => $parentProduct->id,
            'default_distributor_id' => Distributor::firstOrFactory()->id
        ]);

        $priceLevel = PricingRuleLevel::factory()->create();
        $rule = OrderingRule::factory()->create();
        ProductPricing::factory()->create([
            'product_id' => $product->id,
            'pricing_rule_id' => $priceLevel->rule_id,
            'ordering_rule_id' => $rule->id
        ]);
        ProductDistributor::factory()->create([
            'product_id' => $product->id
        ]);

        $this->assertions(
            $action = LoadProductWithEntitiesForCartItem::run(
                $product->id,
                Site::first()
            )
        );
        $this->assertInstanceOf(
            ProductDistributor::class,
            $action->productDistributor
        );
        $this->assertTrue($action->product->hasParent());
    }

    //maybe in future if registry is needed
//    /** @test */
//    public function can_handle_registry_item()
//    {
//        $product = Product::first();
//
//        $action = LoadProductForCartItem::run(
//            $product->id,
//            Site::first()
//        )->isRegistryItem(RegistryItem::firstOrFactory());
//    }

    private function assertions(LoadProductWithEntitiesForCartItem $action)
    {
        $this->assertInstanceOf(
            Product::class,
            $action->product
        );
        $this->assertInstanceOf(
            ProductPricing::class,
            $action->product->pricingBySite($action->site)
        );
        $this->assertInstanceOf(
            ProductAvailability::class,
            $action->productAvailability
        );

        $this->assertGreaterThan(0, $action->calculatedCost);
        $this->assertGreaterThan(0, $action->availableStockQty);

        $this->assertInstanceOf(CartItemDto::class, $action->toCartItemDto(1));
    }
}
