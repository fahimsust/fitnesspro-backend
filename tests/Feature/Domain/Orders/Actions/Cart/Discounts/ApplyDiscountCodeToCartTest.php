<?php

namespace Tests\Feature\Domain\Orders\Actions\Cart\Discounts;

use Domain\Discounts\Enums\DiscountAdvantageTypes;
use Domain\Discounts\Enums\DiscountConditionTypes;
use Domain\Discounts\Models\Advantage\DiscountAdvantage;
use Domain\Discounts\Models\Rule\Condition\DiscountCondition;
use Domain\Orders\Actions\Cart\Discounts\ApplyDiscountCodeToCart;
use Domain\Orders\Dtos\CartItemDto;
use Domain\Orders\Models\Carts\Cart;
use Domain\Orders\Models\Carts\CartDiscounts\CartDiscount;
use Domain\Orders\Models\Carts\CartDiscounts\CartDiscountAdvantage;
use Domain\Orders\Models\Carts\CartDiscounts\CartDiscountCode;
use Domain\Orders\Models\Carts\CartItems\CartItem;
use Domain\Products\Models\Product\Product;
use Domain\Products\Models\Product\ProductAvailability;
use Domain\Sites\Models\Site;
use Domain\Sites\Models\SiteSettings;
use Tests\Feature\Domain\Orders\Traits\TestsDiscountCodes;
use Tests\TestCase;

class ApplyDiscountCodeToCartTest extends TestCase
{
    use TestsDiscountCodes;

    private Product $product;
    private Site $site;
    private Cart $cart;
    private CartItemDto $dto;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->site = Site::firstOrFactory();

        SiteSettings::factory()
            ->for($this->site)
            ->create([
                'cart_allowavailability' => ProductAvailability::factory(3)
                    ->create()
                    ->pluck('id')
                    ->toArray()
            ]);

        CartItem::factory()->create();

        $this->createDiscountCode('test');
    }

    /** @test */
    public function can_apply_code()
    {
        $this->assertDatabaseCount(CartItem::Table(), 1);

        ApplyDiscountCodeToCart::run(
            'test',
            $cart = Cart::first(),
        );

        $this->assertDatabaseCount(CartDiscount::Table(), 1);
        $this->assertDatabaseCount(CartDiscountCode::Table(), 1);
        $this->assertDatabaseHas(CartDiscountAdvantage::Table(), [
            'advantage_id' => $this->advantage->id,
            'amount' => 10
        ]);
    }

    /** @todo */
    public function will_respect_max_codes_per_order()
    {

    }

    /** @todo */
    public function will_fail_if_code_already_applied()
    {

    }

    /** @todo */
    public function will_fail_if_other_conditions_not_met()
    {

    }
}
