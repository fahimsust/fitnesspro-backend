<?php

namespace Tests\Feature\App\Api\Accounts\Controllers\Membership;

use App\Api\Accounts\Requests\Membership\NewMemberRequest;
use Database\Seeders\AccountStatusSeeder;
use Database\Seeders\AccountTypeSeeder;
use Database\Seeders\CountrySeeder;
use Database\Seeders\SiteSeeder;
use Database\Seeders\SpecialtySeeder;
use Database\Seeders\StateSeeder;
use Domain\Accounts\Models\Account;
use Domain\Accounts\Models\Specialty;
use Illuminate\Database\QueryException;
use Tests\RequestFactories\App\Api\Accounts\Requests\Membership\NewMemberRequestFactory;
use Tests\TestCase;
use function route;


class NewMemberControllerTest extends TestCase
{
//     public array $account_array;

//     protected function setUp(): void
//     {
//         parent::setUp(); // TODO: Change the autogenerated stub

//         $this->seed([
//             CountrySeeder::class,
// //            CountryRegionSeeder::class,
//             StateSeeder::class,
//             AccountStatusSeeder::class,
//             AccountTypeSeeder::class,
//             SpecialtySeeder::class,
//             SiteSeeder::class,
//         ]);

//         $this->specialties = Specialty::factory()->count(5)->create();
//     }

//     /** @test */
//     public function can_create_new_member()
//     {
//         NewMemberRequest::fake();

//         $this->assertDatabaseCount(Account::Table(), 0);

//         $this->postJson(route('membership.new'))
//             ->assertCreated();

//         $this->assertDatabaseCount(Account::Table(), 1);
//     }

//     /** @test */
//     public function can_validate_request_and_return_errors()
//     {
//         //@fahim, you can send thru default values like this, no need to merge two arrays
//         $data = NewMemberRequestFactory::new()->create(['email' => '']);

//         $this->postJson(route('membership.new'), $data)
//             ->assertJsonValidationErrorFor('email')
//             ->assertStatus(422);

//         $this->assertDatabaseCount(Account::Table(), 0);
//     }

//     /** @test */
//     public function can_handle_errors()
//     {
//         $this->postJson(
//             route('membership.new'),
//             NewMemberRequestFactory::new()->create(['cim_profile_id' => 0])//@fahim - clever way to get a 500 error to throw.  good thinking
//         )
//             ->assertStatus(500)
//             ->assertJsonFragment(['exception' => QueryException::class]);

//         $this->assertDatabaseCount(Account::Table(), 0);
//     }
}
