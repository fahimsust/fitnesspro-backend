<?php

namespace Tests\Feature\App\Api\Orders\Controllers\Cart;

use App\Api\Orders\Requests\Cart\AddItemToCartRequest;
use Domain\Accounts\Models\Account;
use Domain\Orders\Actions\Cart\SaveCartToSession;
use Domain\Orders\Actions\Cart\StartCart;
use Domain\Products\Models\Product\Product;
use Domain\Products\Models\Product\ProductPricing;
use Domain\Sites\Models\Site;
use Symfony\Component\HttpFoundation\Response;
use Tests\Feature\Traits\HasTestAccount;
use Tests\TestCase;
use function config;
use function route;

class CartItemControllerStoreTest extends TestCase
{
    use HasTestAccount;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        Site::firstOrFactory([
            'id' => config('site.id')
        ]);
    }

    /** @todo */
    public function can_start_cart_and_add_simple_item_to_cart_without_account()
    {
        $pricing = ProductPricing::firstOrFactory();

        AddItemToCartRequest::fake([
            'product_id' => $pricing->product_id
        ]);

        $response = $this->postJson(route('cart.item.store'))
            ->assertStatus(Response::HTTP_CREATED)
            ->assertSessionHas('cart')
            ->assertJsonStructure(['cart', 'item', 'exceptions'])
            ->assertJsonFragment(['exceptions' => []])
            ->assertJsonFragment(['product_id' => $pricing->product_id]);
        //        dd($response->json());
    }

    /** @todo */
    public function can_start_cart_and_add_simple_item_to_cart_with_account()
    {
        $this->createLoginAccount(); //create/login this->account

        $pricing = ProductPricing::firstOrFactory();

        AddItemToCartRequest::fake([
            'product_id' => $pricing->product_id
        ]);

        $response = $this->postJson(route('cart.item.store'))
            ->assertStatus(Response::HTTP_CREATED)
            ->assertSessionHas('cart')
            ->assertJsonStructure(['cart', 'item', 'exceptions'])
            ->assertJsonFragment(['exceptions' => []])
            ->assertJsonFragment(['account_id' => $this->account->id])
            ->assertJsonFragment(['product_id' => $pricing->product_id]);
        //        dd($response->json());
    }

    /** @todo */
    public function can_use_existing_cart_and_add_simple_item()
    {
        SaveCartToSession::run(
            $cart = StartCart::run()
        );

        $pricing = ProductPricing::firstOrFactory();

        AddItemToCartRequest::fake([
            'product_id' => $pricing->product_id
        ]);

        $response = $this->postJson(route('cart.item.store'))
            ->assertStatus(Response::HTTP_CREATED)
            ->assertSessionHas('cart')
            ->assertJsonStructure(['cart', 'item', 'exceptions'])
            ->assertJsonFragment(['exceptions' => []])
            ->assertJsonFragment(['product_id' => $pricing->product_id]);

        $this->assertEquals($cart->id, $response->json('cart')['id']);
        //        dd($response->json());
    }

    /** @todo */
    public function can_use_existing_cart_and_add_matrix_item()
    {
        SaveCartToSession::run(
            $cart = StartCart::run()
        );

        $pricing = ProductPricing::firstOrFactory();

        $parent = ProductPricing::factory()
            ->for(Product::factory()->create(['parent_product' => null]))
            ->create();

        $pricing->product->update(['parent_product' => $parent->product->id]);

        AddItemToCartRequest::fake([
            'product_id' => $pricing->product_id
        ]);

        $response = $this->postJson(route('cart.item.store'))
            ->assertStatus(Response::HTTP_CREATED)
            ->assertSessionHas('cart')
            ->assertJsonStructure(['cart', 'item', 'exceptions'])
            ->assertJsonFragment(['exceptions' => []])
            ->assertJsonFragment(['product_id' => $pricing->product_id]);

        $this->assertEquals($cart->id, $response->json('cart')['id']);
        //        dd($response->json());
    }

    /** @todo */
    public function can_handle_missing_product()
    {
        AddItemToCartRequest::fake([
            'product_id' => 2
        ]);

        $this->postJson(route('cart.item.store'))
            ->assertStatus(Response::HTTP_UNPROCESSABLE_ENTITY);
    }


    /** @todo */
    public function can_handle_mismatch_account()
    {
        $this->createLoginAccount(); //create/login this->account

        SaveCartToSession::run(
            $cart = StartCart::now(account: Account::factory()->create())
        );

        AddItemToCartRequest::fake([
            'product_id' => ProductPricing::firstOrFactory()->product_id
        ]);

        $this->withoutExceptionHandling()
            ->expectExceptionCode(Response::HTTP_FORBIDDEN);

        $this->postJson(route('cart.item.store'));
        //        dd($response->json());
    }

    /** @test */
    public function add_request_can_validate()
    {
        $this->postJson(route('cart.item.store'))
            ->assertStatus(422);
    }
}
